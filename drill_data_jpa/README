用法SOP：
1 添加guava依赖 - 包含Java中大量的工具类；
2 把 data.sql 添加到/resources路径下 - 用于生成数据表中的模拟数据；
3 在Spring Boot配置文件 application.properties文件中， 添加必要的配置信息：
    - 数据源信息；
    - JPA属性。
4 定义用于映射的实体类型；
    参考：Person.java

5 定义DAO的接口；
    参考：PersonRepository.java

6 运行；
    参考：DataController.java
    作用：委托Repo对象，完成用户需要的CRUD操作。

7 检查效果是否符合预期：
手段：变着法地CURD

======
用法2：自定义 Repo的实现；
SOP：
1 创建 Specification类型 - 作用：？？？
    手段： 定义一个返回值为 Specification的方法 byAuto();
    特征：
        1 使用泛型T - 因此Specification类型能够接收任意的实体类。
        2 byAuto()接收的参数是：entityManager 与 封装了查询条件的实体对象。
    参考：CustomSpec.java

2 创建接口 - 作用：定义DAO操作；
    参考：CustomRepository.java

3 创建接口的实现类 - 作用：具体实现DAO的操作；

===
不要无脑地拷贝粘贴，因为多出的东西可能就会导致错误；
比如这里多粘贴了一个 CustomRepository，由于缺少合作的小伙伴。它就会导致 No property auto found for type Person 的错误
因为Spring Data JPA 把 方法findByAuto()中的auto识别成为 Person的属性了 昨晚+今晚

===
验证结果是否符合预期：
保存 - http://localhost:8080/save?name=dd&address=上海&age=25
查询 - http://localhost:8080/q1?address=合肥
多条件查询(方法名) - http://localhost:8080/q2?address=合肥&name=汪云飞
多条件查询(@Query注解) - http://localhost:8080/q3?address=合肥&name=汪云飞
多条件查询(@NamedQuery注解 + 方法名) - http://localhost:8080/q4?address=合肥&name=汪云飞
排序查询 - http://localhost:8080/sort
分页查询 - http://localhost:8080/page

===
自定义Repo - 实现使用java对象来自动封装查询参数；
注：一套套做完后，最后一步 - 在启动类上添加自定义的Repo的Class对象
验证结果是否符合预期：
预期：
    对于Person对象，当对象的name有值时，就会对name进行like查询；
    当age有值时，就会进行等于查询；
    当所有属性值都为空时，就会默认查询出所有的记录。

没有任何的查询条件 - http://localhost:8080/auto
存在address的查询条件 - http://localhost:8080/auto?address=肥
更多查询条件 - http://localhost:8080/auto?address=肥&name=云&age=32

数据库，坑就是多呀
1 jar包的坑；
2 属性文件的坑；
3 实现步骤的坑(最后一步)