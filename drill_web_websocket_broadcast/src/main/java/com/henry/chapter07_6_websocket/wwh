广播式的通信

特征：当服务端有消息时， 会把消息发送给 所有连接了当前endpoint的浏览器；
SOP：
    1 在项目中配置 WebSocket；
        1.1 开启 SpringBoot对WebSocket的支持；
            手段：在 用于配置的类 上，添加 @EnableWebSocketMessageBroker注解；
            作用：添加此注解后，在控制器类中，就可以使用 @MessageMapping - 用来映射特定的请求地址
        1.2 对WebSocket进行具体的属性配置；
            手段：继承 AbstractWebSocketMessageBrokerConfigurer类， 然后重写方法 - 对WebSocket进行配置。
            作用：
                - 1 注册STOMP协议的节点；
                - 2 配置 广播式通信所需要使用的 /topic消息代理；

    2 准备用于封装 请求与响应 的POJO类型；
        WiselyMessage.java
        WiselyResponse.java

    3 准备控制器；
        作用：
            1 映射 浏览器端发来的请求；- 接收消息
            手段：@MessageMapping(<requestPath>)
            2 定义 浏览器端可以订阅的路径； - 发送消息
            手段：@SendTo(<path_for_browser_to_subscribe>)

    4 准备stomp协议相关的脚本文件；
        作用：用于支持在页面中引用STOMP协议的相关基本组件；
        需要的脚本：
            stomp.min.js // STOMP协议的客户端脚本
            sockjs.min.js // SockJS的客户端脚本
            jquery.js // 操作DOM元素的脚本

    5 准备演示页面 ws.html；
        作用：
            1 能够连接到 SockJS的endpoint（在step1中定义）； // 对应于 step1中声明的endpoint名称；
            实现手段：
                - 1 创建 SockJS对象，并指定 所连接到的SockJS的endpoint； // 这是一个具体实现WebSocket的对象
                    手段：var socket = new SockJS(<endpoint_state_in_webSocket_config>)

                - 2 声明使用STOMP子协议来作为 WebSocket客户端；
                    手段：stompClient = Stomp.over(socket);

                - 3 连接到 WebSocket服务端；
                    stompClient.connect(xxx)

                - 4 在页面中，订阅 目标路径所发送的消息； // 对应于step3中声明的 <path_for_browser_to_subscribe>
                    stompClient.subscribe(<subscribe_path>, parseTheResponse())

                - 5 在页面中，向 特定的目标路径发送消息； // 对应于step3中声明的 <requestPath>
                    stompClient.send(<request_path>, <request_params>)

    6 配置viewController - 方便对请求路径进行快速跳转操作。
    手段：在 WebMvcConfig.java 中的addViewControllers()方法中，添加 路径->页面的映射关系

note：这里没有配置对/的控制器方法，所以直接访问 http://localhost:8080/会 404
需要访问的路径是： http://localhost/8080/ws

===
演示效果：
    step one : 浏览器1发送消息A，给服务器端；
    step two : 服务器端接收到消息后，把消息发送给 所有订阅了自己的浏览器； // 参见：控制器类的实现

对于浏览器：主动发送消息 + 被动接收消息；
对于服务端：主动发消息 + 被动接收消息；
that is 双工通信；